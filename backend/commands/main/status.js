const { SlashCommandBuilder, PermissionFlagsBits } = require('discord.js');

const STATUS_EMOJIS = {
    'online': 'üü¢',
    'offline': 'üî¥',
    'away': 'üü°'
};

const MAX_NICKNAME_LENGTH = 32;

module.exports = {
    data: new SlashCommandBuilder()
        .setName('—Å—Ç–∞—Ç—É—Å')
        .setDescription('–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏')
        .addStringOption(option =>
            option.setName('status')
                .setDescription('Your status')
                .setRequired(true)
                .addChoices(
                    { name: 'üü¢ Online', value: 'online' },
                    { name: 'üî¥ Offline', value: 'offline' },
                    { name: 'üü° Away', value: 'away' },
                ))
        .addUserOption(option =>
            option.setName('user')
                .setDescription('User to change status (admins only)')
                .setRequired(false))
        .setDefaultMemberPermissions(PermissionFlagsBits.ChangeNickname),

    async execute(interaction) {
        await interaction.deferReply();
        const status = interaction.options.getString('status');
        const targetUser = interaction.options.getUser('user');
        
        if (targetUser && !interaction.member.permissions.has('Administrator')) {
            await interaction.editReply('–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –º–µ–Ω—è—Ç—å —Å—Ç–∞—Ç—É—Å –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
            return;
        }

        const member = targetUser ? 
            await interaction.guild.members.fetch(targetUser.id) : 
            interaction.member;

        const bot = interaction.guild.members.me;
        if (!bot.permissions.has('ManageNicknames')) {
            await interaction.editReply('–£ –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∏–∫–Ω–µ–π–º–æ–≤');
            return;
        }

        if (member.roles.highest.position >= bot.roles.highest.position) {
            await interaction.editReply('–ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º, —Ç–∞–∫ –∫–∞–∫ —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã—à–µ —Ä–æ–ª–∏ –±–æ—Ç–∞');
            return;
        }
        
        let originalNick = member.nickname || member.user.globalName || member.user.username;
        originalNick = originalNick.replace(/^[üü¢üî¥üü°]\s*\|\s*/, '');

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –Ω–∏–∫–Ω–µ–π–º –∏ –æ–±—Ä–µ–∑–∞–µ–º –µ–≥–æ –¥–æ 32 —Å–∏–º–≤–æ–ª–æ–≤
        const prefix = `${STATUS_EMOJIS[status]} | `;
        const maxNameLength = MAX_NICKNAME_LENGTH - prefix.length;
        const newNick = prefix + originalNick.slice(0, maxNameLength);

        try {
            await member.setNickname(newNick);
            await interaction.editReply(
                targetUser ? 
                `–°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${member.displayName} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "${STATUS_EMOJIS[status]}"` :
                `–í–∞—à —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "${STATUS_EMOJIS[status]}"`
            );
        } catch (error) {
            console.error(error);
            await interaction.editReply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞');
        }
    },
}; 