const { SlashCommandBuilder, PermissionFlagsBits } = require('discord.js');

const STATUS_EMOJIS = {
    'online': 'üü¢',
    'offline': 'üî¥',
    'away': 'üü°'
};

const MAX_NICKNAME_LENGTH = 32;

const WORK_START_HOUR = parseInt(process.env.WORK_START_HOUR) || 8; // –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è
const WORK_END_HOUR = parseInt(process.env.WORK_END_HOUR) || 17; // –ö–æ–Ω–µ—Ü —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–±–æ—Ä–∞ –Ω–∏–∫–Ω–µ–π–º–∞ –Ω–∞ —Å—Ç–∞—Ç—É—Å –∏ –∏–º—è
function parseNickname(nickname) {
    const statusMatch = nickname.match(/^(\p{Emoji})\s*(.+)$/u);
    if (statusMatch) {
        return {
            currentStatus: statusMatch[1],
            baseName: statusMatch[2]
        };
    }
    return {
        currentStatus: null,
        baseName: nickname
    };
}

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function changeUserStatus(member, status) {
    const currentName = member.user.globalName || member.user.username;
    const { baseName } = member.nickname ? 
        parseNickname(member.nickname) : 
        { baseName: currentName };

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –Ω–∏–∫–Ω–µ–π–º —Å –Ω–æ–≤—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
    const prefix = `${STATUS_EMOJIS[status]} `;
    const maxNameLength = MAX_NICKNAME_LENGTH - prefix.length;
    const newNick = prefix + baseName.slice(0, maxNameLength);

    try {
        await member.setNickname(newNick);
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${member.displayName}:`, error);
    }
}

module.exports = {
    data: new SlashCommandBuilder()
        .setName('—Å—Ç–∞—Ç—É—Å')
        .setDescription('–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏')
        .addStringOption(option =>
            option.setName('status')
                .setDescription('–í–∞—à —Å—Ç–∞—Ç—É—Å')
                .setRequired(true)
                .addChoices(
                    { name: 'üü¢ Online', value: 'online' },
                    { name: 'üî¥ Offline', value: 'offline' },
                    { name: 'üü° Away', value: 'away' },
                )),
        // .addUserOption(option =>
        //     option.setName('user')
        //         .setDescription('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)')
        //         .setRequired(false))
        // .setDefaultMemberPermissions(PermissionFlagsBits.ChangeNickname),

    async execute(interaction) {
        await interaction.deferReply();
        const status = interaction.options.getString('status');
        const targetUser = interaction.options.getUser('user');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        const isAdmin = interaction.member.permissions.has('Administrator');

        // –ï—Å–ª–∏ –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è
        if (!isAdmin) {
            const now = new Date();
            const day = now.getDay();
            const hour = now.getHours();

            // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—á–∏–º
            const isWorkingTime = day >= 1 && day <= 5 && hour >= WORK_START_HOUR && hour < WORK_END_HOUR;

            if (!isWorkingTime) {
                await interaction.editReply('–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è.');
                return;
            }
        }

        if (targetUser && !interaction.member.permissions.has('Administrator')) {
            await interaction.editReply('–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –º–µ–Ω—è—Ç—å —Å—Ç–∞—Ç—É—Å –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
            return;
        }

        const member = targetUser ? 
            await interaction.guild.members.fetch(targetUser.id) : 
            interaction.member;

        const bot = interaction.guild.members.me;
        if (!bot.permissions.has('ManageNicknames')) {
            await interaction.editReply('–£ –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∏–∫–Ω–µ–π–º–æ–≤');
            return;
        }

        if (member.roles.highest.position >= bot.roles.highest.position) {
            await interaction.editReply('–ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º, —Ç–∞–∫ –∫–∞–∫ —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã—à–µ —Ä–æ–ª–∏ –±–æ—Ç–∞');
            return;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –Ω–∏–∫–Ω–µ–π–º –∏–ª–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ–µ –∏–º—è
        const currentName = member.user.globalName || member.user.username;
        const { baseName } = member.nickname ? 
            parseNickname(member.nickname) : 
            { baseName: currentName };

        // –ò–∑–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await changeUserStatus(member, status);

        await interaction.editReply(
            targetUser ? 
            `–°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${baseName} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "${STATUS_EMOJIS[status]}"` :
            `–í–∞—à —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "${STATUS_EMOJIS[status]}"`
        );
    },

    changeUserStatus
}; 