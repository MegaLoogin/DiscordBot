const { Client, Collection, GatewayIntentBits } = require("discord.js");
const deployCommands = require('./deploy-commands.js');
const fs = require('node:fs');
const path = require('node:path');
const GoogleAPI = require("./utils/gapi.js");

const express = require('express');
const router = require("./utils/router.js");

const app = express();
app.use(express.json());
app.use(router);

const ADMIN_IDS = process.env.ADMIN_IDS ? process.env.ADMIN_IDS.split(',') : [];

const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent,
        GatewayIntentBits.GuildVoiceStates,
        GatewayIntentBits.GuildPresences,
        GatewayIntentBits.GuildMembers
    ]
});
const gapi = new GoogleAPI();

client.commands = new Collection();

const foldersPath = path.join(__dirname, 'commands');
const commandFolders = fs.readdirSync(foldersPath);

for (const folder of commandFolders) {
	const commandsPath = path.join(foldersPath, folder);
	const commandFiles = fs.readdirSync(commandsPath).filter(file => file.endsWith('.js'));
	for (const file of commandFiles) {
		const filePath = path.join(commandsPath, file);
		const command = require(filePath);

		if ('data' in command && 'execute' in command) {
			client.commands.set(command.data.name, command);
		} else {
			console.log(`[WARNING] The command at ${filePath} is missing a required "data" or "execute" property.`);
		}
	}
}

const eventsPath = path.join(__dirname, 'events');
const eventFiles = fs.readdirSync(eventsPath).filter(file => file.endsWith('.js'));

for (const file of eventFiles) {
	const filePath = path.join(eventsPath, file);
	const event = require(filePath);
	if (event.once) {
		client.once(event.name, (...args) => event.execute(...args));
	} else {
		client.on(event.name, (...args) => event.execute(...args));
	}
}

const CHANNEL_ID = process.env.ACTIVITY_CHAN_ID;
const CHECK_INTERVAL = 30 * 1000;

const activityTracker = require('./utils/activityTracker');
const statusTracker = require('./utils/statusTracker');
const schedule = require('node-schedule');

const WORK_START_HOUR = parseInt(process.env.WORK_START_HOUR) || 8; // –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è
const WORK_END_HOUR = parseInt(process.env.WORK_END_HOUR) || 17; // –ö–æ–Ω–µ—Ü —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è


// –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
function isWorkingTime(date = new Date()) {
    const day = date.getDay();
    const hour = date.getHours();
    return day >= 1 && day <= 5 && hour >= WORK_START_HOUR && hour < WORK_END_HOUR;
}

async function sendReminder(userId) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if (ADMIN_IDS.includes(userId)) return;

    try {
        const user = await client.users.fetch(userId);
        await user.send('‚ö†Ô∏è –í—ã –Ω–µ –ø—Ä–æ—è–≤–ª—è–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–æ–ª–µ–µ 4 —á–∞—Å–æ–≤ –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è!');

        const channel = client.channels.cache.get(CHANNEL_ID);
        if (channel) {
            await channel.send(`**–í–Ω–∏–º–∞–Ω–∏–µ:** <@${userId}> –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω –±–æ–ª–µ–µ 4 —á–∞—Å–æ–≤!`);
        }

        activityTracker.lastNotification.set(userId, Date.now());
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
    }
}

async function sendStatusReminder(userId) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if (ADMIN_IDS.includes(userId)) return;

    try {
        const user = await client.users.fetch(userId);
        await user.send('‚ö†Ô∏è –í—ã –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —Å—Ç–∞—Ç—É—Å "–æ–Ω–ª–∞–π–Ω" –∏–ª–∏ "—É—à–µ–ª" —á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è!');

        const channel = client.channels.cache.get(CHANNEL_ID);
        if (channel) {
            await channel.send(`**–í–Ω–∏–º–∞–Ω–∏–µ:** <@${userId}> –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–∏–ª —Å—Ç–∞—Ç—É—Å –Ω–∞ —Ä–∞–±–æ—Ç–µ!`);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ:', error);
    }
}

client.on('ready', () => {
  console.log(`–ë–æ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫ ${client.user.tag}`);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∏–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  async function initializeUsernames() {
    try {
      const guilds = client.guilds.cache;
      for (const guild of guilds.values()) {
        const members = await guild.members.fetch();
        for (const member of members.values()) {
          if (member.user.bot) continue;
          
          const userId = member.id;
          const username = member.displayName || member.user.username;
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –Ω–∏–∫–∏ –≤ –æ–±–æ–∏—Ö —Ç—Ä–µ–∫–µ—Ä–∞—Ö
          if (!activityTracker.userNames.has(userId)) {
            console.log(`–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∏–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}: ${username}`);
            activityTracker.updateUserName(userId, username);
          }
          
          if (!statusTracker.userNames.has(userId)) {
            console.log(`–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∏–∫–∞ –≤ —Å—Ç–∞—Ç—É—Å-—Ç—Ä–µ–∫–µ—Ä–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}: ${username}`);
            statusTracker.updateUserName(userId, username);
          }
        }
      }
      console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∏–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∏–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
    }
  }

  // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –Ω–∏–∫–æ–≤
  initializeUsernames();

  // –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç
  schedule.scheduleJob(`15 ${WORK_END_HOUR} * * 1-5`, async () => {
    try {
      const statusReport = statusTracker.getDailyReport();
      const activityReport = await activityTracker.getDailyReport(client, ADMIN_IDS);

      // –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø –ø–µ—Ä–µ–¥ —Å–±—Ä–æ—Å–æ–º –¥–∞–Ω–Ω—ã—Ö
      const { createBackup, cleanupOldBackups } = require('./utils/router');
      const backupPath = createBackup();
      console.log(`–°–æ–∑–¥–∞–Ω –±—ç–∫–∞–ø –¥–∞–Ω–Ω—ã—Ö: ${backupPath}`);
      
      // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã
      cleanupOldBackups();

      // –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
      const report = statusReport.map(status => {
          const activity = activityReport.find(a => a.userId === status.userId) || { time: 0 };
          return {
              ...status,
              activity: activity.time
          };
      });

      const channel = client.channels.cache.get(CHANNEL_ID);

      if (channel) {
          const embed = {
              title: '–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
              description: statusTracker.formatReport(report) || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏',
              color: 0x0099ff,
              timestamp: new Date().toISOString()
          };
          await channel.send({ embeds: [embed] });
      }

      // –°–±—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞
      await statusTracker.resetDailyStats(client);
      activityTracker.resetData();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞:', error);
    }
  });

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  setInterval(() => {
    if (!activityTracker.isWorkingTime()) return;

    client.users.cache.forEach(user => {
        if (activityTracker.checkActivity(user.id, ADMIN_IDS)) {
            sendReminder(user.id);
        }
    });
  }, CHECK_INTERVAL);

  // –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 10:15
  schedule.scheduleJob(`15 ${WORK_START_HOUR} * * 1-5`, async () => {
    client.guilds.cache.forEach(guild => {
        guild.members.fetch().then(members => {
            members.forEach(member => {
                if (!member.user.bot) {
                    const { currentStatus } = statusTracker.parseNickname(member.nickname || member.user.username);
                    if (currentStatus !== 'üü¢' && currentStatus !== 'üü°') {
                        sendStatusReminder(member.id); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    }
                }
            });
        });
    });
  });

  // –ó–∞–ø–ª–∞–Ω–∏—Ä—É–π—Ç–µ —Å–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è
  schedule.scheduleJob(`55 ${WORK_START_HOUR - 1} * * 1-5`, async () => {
    console.log('–°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è...');
    await statusTracker.resetDailyStats(client); // –°–±—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–æ–≤
    activityTracker.resetData(); // –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  });
});

// –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
client.on('messageCreate', message => {
  if (message.author.bot || ADMIN_IDS.includes(message.author.id)) return;
  activityTracker.updateMessageActivity(message.author.id);
});

client.on('voiceStateUpdate', (oldState, newState) => {
  const userId = newState.member.id;
  if (ADMIN_IDS.includes(userId)) return;
  if (newState.channelId && !oldState.channelId) {
    activityTracker.updateVoiceActivity(userId);
  }
});

client.on('presenceUpdate', (oldPresence, newPresence) => {
  if (!activityTracker.isWorkingTime()) return;
  const member = newPresence.member;
  if (!member || member.user.bot || ADMIN_IDS.includes(member.user.id)) return;
  activityTracker.updatePresence(member.user.id, oldPresence, newPresence);
});

// –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∏–∫–Ω–µ–π–º–∞
client.on('guildMemberUpdate', (oldMember, newMember) => {
    if (oldMember.displayName !== newMember.displayName) {
        const userId = newMember.id;
        const newUsername = newMember.displayName || newMember.user.username;
        
        console.log(`–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}: ${oldMember.displayName} -> ${newUsername}`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∏–∫ –≤ –æ–±–æ–∏—Ö —Ç—Ä–µ–∫–µ—Ä–∞—Ö
        activityTracker.updateUserName(userId, newUsername);
        statusTracker.updateUserName(userId, newUsername);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        statusTracker.updateUserStatus(userId, newMember.displayName);
    }
});

(async () => {
	await gapi.authorize();
  await deployCommands();
  try{
    console.log(await client.login(process.env.DTOKEN));
  }catch(e){
    console.log(e);
  }
})();

(async () => {
	app.listen(8181, () => console.log("Server started!"));
})();

// –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
setInterval(() => {
    if (isWorkingTime()) {
        statusTracker.resetAllStatuses(client);
    }
}, 15000); // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É


module.exports = { client, gapi };